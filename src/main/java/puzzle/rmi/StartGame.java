package puzzle.rmi;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.File;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class StartGame extends JFrame {

    private JPanel panel;
    private JButton startNew;
    private JTextField ipAddress;
    private JTextField portField;
    private JButton joinGame;
    private JButton chooseImageButton;
    private JLabel imageName;
    private JTextField rows;
    private JTextField columns;
    private JTextField myPort;
    private File file;

    public StartGame() {
        String basePath = System.getProperty("user.dir");
        final JFileChooser chooser = new JFileChooser(basePath);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("Image", "jpg", "png", "jpeg"));
        this.chooseImageButton.addActionListener(e -> {
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                this.file = chooser.getSelectedFile();
                this.imageName.setText(this.file.getName());
            }
        });

        this.startNew.addActionListener(e -> {
            try {
                GameService gameService = this.createGameService();
                if (gameService != null)
                    gameService.startNewGame(this.file.getPath(), Integer.parseInt(this.rows.getText()), Integer.parseInt(this.columns.getText()), Integer.parseInt(myPort.getText()));
            } catch (RemoteException remoteException) {
                JOptionPane.showMessageDialog(null, "Port already in use", "Port Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        this.joinGame.addActionListener(e -> {
            try {
                if (this.portField.getText().equals("")){
                    JOptionPane.showMessageDialog(this, "Insert join port.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (this.myPort.getText().equals(this.portField.getText())){
                    JOptionPane.showMessageDialog(this, "Your port and join port must be different.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                GameService gameService = this.createGameService();
                if (gameService != null)
                    gameService.joinGame(this.file.getPath(), this.ipAddress.getText(), Integer.parseInt(this.portField.getText()), Integer.parseInt(myPort.getText()));
            } catch (RemoteException remoteException) {
                JOptionPane.showMessageDialog(null, "Port already in use", "Port Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        setSize(400, 400);
        getContentPane().add(panel);
        setTitle("Puzzle");
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    private GameService createGameService() throws RemoteException {
        if (this.file == null){
            JOptionPane.showMessageDialog(this, "File does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if (this.myPort.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Insert your port.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        GameService gameService = new GameServiceImpl();
        Registry registry = LocateRegistry.createRegistry(Integer.parseInt(myPort.getText()));
        GameService gameServiceStub = (GameService) UnicastRemoteObject.exportObject(gameService, 0);
        registry.rebind(myPort.getText(), gameServiceStub);
        super.dispose();
        return gameService;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        startNew = new JButton();
        startNew.setText("Start New Game");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(startNew, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("IP Address:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(label1, gbc);
        ipAddress = new JTextField();
        ipAddress.setColumns(10);
        ipAddress.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(ipAddress, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Port");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(label2, gbc);
        portField = new JTextField();
        portField.setColumns(10);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(portField, gbc);
        joinGame = new JButton();
        joinGame.setText("Join Game");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 9;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(joinGame, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 50;
        panel.add(spacer1, gbc);
        chooseImageButton = new JButton();
        chooseImageButton.setText("Choose Image");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(chooseImageButton, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipady = 30;
        panel.add(spacer2, gbc);
        imageName = new JLabel();
        imageName.setText("-");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(imageName, gbc);
        columns = new JTextField();
        columns.setText("5");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(columns, gbc);
        rows = new JTextField();
        rows.setText("3");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(rows, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Rows:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(label3, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Columns:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(label4, gbc);
        final JLabel label5 = new JLabel();
        label5.setText("My port:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(label5, gbc);
        myPort = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(myPort, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
