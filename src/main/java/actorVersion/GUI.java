package actorVersion;

import akka.actor.typed.ActorRef;
import akka.actor.typed.ActorSystem;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.File;
import java.util.List;

public class GUI extends JFrame {

    private final JFileChooser inputDirectoryPath;
    private final JFileChooser excludedWordsFilePath;
    private File actualDir;
    private File actualFile2;
    private int wordsAmount;
    private final DefaultListModel<String> listModel;

    private JPanel panel;
    private JButton readDirectory;
    private JButton readExcludedWordsFile;
    private JSpinner mostFrequentWordsAmount;
    private JButton startButton;
    private JButton stopButton;
    private JLabel actualDirectory;
    private JLabel actualFile;
    private JScrollPane result;
    private JSeparator sep1;
    private JSeparator sep2;

    public GUI(ActorRef<BaseMessage> guardian) {
        setTitle("Document analyzer");
        setSize(800, 600);

        SpinnerModel spinnerModel = new SpinnerNumberModel(5, 1, null, 1);
        mostFrequentWordsAmount.setModel(spinnerModel);
        mostFrequentWordsAmount.setSize(100, 10);

        String basePath = System.getProperty("user.dir");

        inputDirectoryPath = new JFileChooser(basePath);
        inputDirectoryPath.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        excludedWordsFilePath = new JFileChooser(basePath);
        excludedWordsFilePath.setAcceptAllFileFilterUsed(false);
        excludedWordsFilePath.addChoosableFileFilter(new FileNameExtensionFilter("Textual file (.txt)", "txt"));

        this.readDirectory.addActionListener(e -> {
            if (inputDirectoryPath.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                actualDir = inputDirectoryPath.getSelectedFile();
                this.actualDirectory.setText("Documents directory:  " + actualDir.getName());
            }
        });

        this.readExcludedWordsFile.addActionListener(e -> {
            if (excludedWordsFilePath.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                actualFile2 = excludedWordsFilePath.getSelectedFile();
                this.actualFile.setText("Excluded words file:   " + actualFile2.getName());
            }
        });

        this.actualDirectory.setText("Documents directory:  No directory selected...");
        this.actualFile.setText("Excluded words file:   No file selected...");

        listModel = new DefaultListModel<>();
        JList<String> list1 = new JList<>();
        list1.setModel(listModel);

        startButton.addActionListener(e -> {
            this.wordsAmount = (Integer) mostFrequentWordsAmount.getValue();
            try {
                int number = Integer.parseInt(String.valueOf((mostFrequentWordsAmount).getValue()));
                if (number <= 0) {
                    return;
                }
            } catch (NumberFormatException | NullPointerException ignored) {
            }
            listModel.clear();
            listModel.addElement("Initializing...");
            listModel.addElement("Words processed: " + 0);
            startButton.setEnabled(false);
            stopButton.setEnabled(true);
            guardian.tell(new StartMessage(actualDir != null ? actualDir.getPath() : "", wordsAmount, actualFile2 != null ? actualFile2.getPath() : ""));
        });

        stopButton.addActionListener(e -> {
            startButton.setEnabled(false);
            stopButton.setEnabled(true);
            guardian.tell(new StopMessage());
        });

        list1.setEnabled(false);
        result.setViewportView(list1);
        stopButton.setEnabled(false);

        getContentPane().add(panel);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
    }

    public void updateCountValue(List<String> result, int value) {
        SwingUtilities.invokeLater(() -> {
            listModel.clear();
            listModel.addAll(result);
            listModel.addElement("");
            listModel.addElement("Words processed: " + value);
        });
    }

    public void resetButtons() {
        startButton.setEnabled(true);
        stopButton.setEnabled(false);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        panel.setAlignmentX(0.5f);
        panel.setAutoscrolls(false);
        panel.setEnabled(true);
        panel.setForeground(new Color(-12828863));
        panel.setName("Document analyzer");
        panel.setPreferredSize(new Dimension(800, 600));
        panel.setVisible(true);
        actualDirectory = new JLabel();
        actualDirectory.setHorizontalAlignment(0);
        actualDirectory.setHorizontalTextPosition(0);
        actualDirectory.setText("\"Path\"");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(actualDirectory, gbc);
        readDirectory = new JButton();
        readDirectory.setActionCommand("Button");
        readDirectory.setText("Choose Dir");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        panel.add(readDirectory, gbc);
        readExcludedWordsFile = new JButton();
        readExcludedWordsFile.setText("Choose File");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        panel.add(readExcludedWordsFile, gbc);
        actualFile = new JLabel();
        actualFile.setHorizontalAlignment(0);
        actualFile.setHorizontalTextPosition(0);
        actualFile.setText("\"Path2\"");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(actualFile, gbc);
        sep2 = new JSeparator();
        sep2.setForeground(new Color(-12828863));
        sep2.setMinimumSize(new Dimension(0, 0));
        sep2.setPreferredSize(new Dimension(0, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridwidth = 3;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.ipady = 20;
        panel.add(sep2, gbc);
        result = new JScrollPane();
        result.setAutoscrolls(true);
        result.setPreferredSize(new Dimension(400, 300));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(result, gbc);
        sep1 = new JSeparator();
        sep1.setAutoscrolls(false);
        sep1.setForeground(new Color(-12828863));
        sep1.setMinimumSize(new Dimension(0, 0));
        sep1.setOpaque(false);
        sep1.setPreferredSize(new Dimension(0, 0));
        sep1.setVisible(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.ipady = 20;
        panel.add(sep1, gbc);
        mostFrequentWordsAmount = new JSpinner();
        mostFrequentWordsAmount.setAlignmentX(0.0f);
        mostFrequentWordsAmount.setMaximumSize(new Dimension(150, 30));
        mostFrequentWordsAmount.setPreferredSize(new Dimension(68, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        panel.add(mostFrequentWordsAmount, gbc);
        startButton = new JButton();
        startButton.setContentAreaFilled(true);
        startButton.setPreferredSize(new Dimension(78, 30));
        startButton.setText("Start");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        panel.add(startButton, gbc);
        stopButton = new JButton();
        stopButton.setText("Stop");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        panel.add(stopButton, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Words amount");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel.add(label1, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
